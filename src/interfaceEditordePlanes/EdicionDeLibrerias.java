package interfaceEditordePlanes;

import com.thoughtworks.xstream.*;
import editorDePlanes.Accion;
import editorDePlanes.Libreria;
import editorDePlanes.NodoElemento;
import editorDePlanes.Predicado;
import editorDePlanes.PredicadoCompuesto;
import editorDePlanes.Variable;
import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.*;
import javax.swing.event.TreeSelectionListener;
import org.jdesktop.application.Action;

/**
 *
 * @author mpacheco
 */

public class EdicionDeLibrerias extends javax.swing.JFrame {
    
    /** Creates new form EdicionDeLibrerias */
    public EdicionDeLibrerias(Libreria Lib,InterfaceEditordePlanesView P) {
        
        //Raiz= new javax.swing.tree.DefaultMutableTreeNode("LibreriasDeAcciones");
        //Preguntamos si hay libreia a modificar, si es null por ahora no hace nada
        if (Lib != null){
        //crear el modelo01 y pasarle la lib como raiz
        //recibe a Lib como parametro la cual es la que se va a modificar, o sea es la Target
        LibEnUso=Lib;
        //Raiz.add(LibEnUso.Obtener_Nodo());
        }else{
             
            LibEnUso = new Libreria("NuevaLibreria");
            //Raiz.add(LibEnUso.Obtener_Nodo());
        }
        Raiz = LibEnUso.Obtener_Nodo();
        //Raiz.add(LibEnUso.Obtener_Nodo());
        initComponents();

        this.Arbol_LibreriaAmodificar.setEditable(true);
        this.Arbol_LibreriaAmodificar.addTreeSelectionListener(new PanelDeDetalleNodo());
        this.Arbol_LibreriaAmodificar.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        //Aca va el padre que lo llama, para esta demostracion es Principal
        this.PantallaPadre = P;
    }

    void addWindowStateListener(InterfaceEditordePlanesView aThis) {
        this.PantallaPadre = aThis;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cambioNombreLib = new javax.swing.JFrame();
        cancelarNombreLib = new javax.swing.JButton();
        okNombreLib = new javax.swing.JButton();
        nombreDeLib = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        agregarNodo = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        NombreNodoNuevo = new javax.swing.JTextField();
        CrearNodo = new javax.swing.JButton();
        instanciaElemento = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        VentanaArbol01 = new javax.swing.JScrollPane();
        /*-------------------Creacion del Modelo-------------------------*/
        modelo01= new DefaultTreeModel(Raiz);
        Arbol_LibreriaAmodificar = new javax.swing.JTree(modelo01);
        //new javax.swing.JTree(Raiz);
        jPanel2 = new javax.swing.JPanel();
        CargarLibFuente = new javax.swing.JButton();
        VentanaArbol02 = new javax.swing.JScrollPane();
        this.Raiz02 = new DefaultMutableTreeNode("No hay Fuente Cargada");
        this.modelo02 = new DefaultTreeModel(Raiz02);
        Arbol_Librerias = new javax.swing.JTree();
        this.Arbol_Librerias.setModel(this.modelo02);
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DetalleNodoElemento = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        cargar_Libreria = new javax.swing.JMenuItem();
        guardarLib = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        borrarElementos = new javax.swing.JMenuItem();
        cambiarNombreLib = new javax.swing.JMenuItem();

        cambioNombreLib.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        cambioNombreLib.setTitle("Cambiar Nombre");
        cambioNombreLib.setAlwaysOnTop(true);
        cambioNombreLib.setBackground(new java.awt.Color(204, 255, 255));
        cambioNombreLib.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cambioNombreLib.setResizable(false);

        cancelarNombreLib.setText("Cancelar");
        cancelarNombreLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarNombreLibActionPerformed(evt);
            }
        });

        okNombreLib.setText("Aceptar");
        okNombreLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okNombreLibActionPerformed(evt);
            }
        });

        nombreDeLib.setText("NombreNuevoLibreriaActual");
        nombreDeLib.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreDeLibKeyPressed(evt);
            }
        });

        jLabel1.setText("Nombre");

        javax.swing.GroupLayout cambioNombreLibLayout = new javax.swing.GroupLayout(cambioNombreLib.getContentPane());
        cambioNombreLib.getContentPane().setLayout(cambioNombreLibLayout);
        cambioNombreLibLayout.setHorizontalGroup(
            cambioNombreLibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cambioNombreLibLayout.createSequentialGroup()
                .addGroup(cambioNombreLibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cambioNombreLibLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nombreDeLib, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cambioNombreLibLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(okNombreLib)
                        .addGap(18, 18, 18)
                        .addComponent(cancelarNombreLib))
                    .addGroup(cambioNombreLibLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        cambioNombreLibLayout.setVerticalGroup(
            cambioNombreLibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cambioNombreLibLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreDeLib, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(cambioNombreLibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarNombreLib, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okNombreLib))
                .addGap(20, 20, 20))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edici√≥n de Libreria");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        agregarNodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/undo.png"))); // NOI18N
        agregarNodo.setToolTipText("Pasar elemento a lib. actual");
        agregarNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarNodoActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " Libreria Actual ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        jPanel1.setToolTipText("Libreria actual");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/Abrir.png"))); // NOI18N
        jButton2.setToolTipText("Reemplaza la libreria actual");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargar_LibreriaActionPerformed(evt);
            }
        });

        NombreNodoNuevo.setFont(new java.awt.Font("Verdana", 0, 10));
        NombreNodoNuevo.setText("NuevoNombre");

        CrearNodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/crear.png"))); // NOI18N
        CrearNodo.setToolTipText("Crea nuevos elemntos");
        CrearNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearNodoActionPerformed(evt);
            }
        });

        instanciaElemento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/redo.png"))); // NOI18N
        instanciaElemento.setToolTipText("Permite instaciar predicados");
        instanciaElemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instanciaElementoActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/Borrar A y L.png"))); // NOI18N
        jButton1.setToolTipText("Borra elementos seleccionados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/Guardar.png"))); // NOI18N
        jButton3.setToolTipText("Guarda la libreria actual");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarLibActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/Nuevo Nivel.png"))); // NOI18N
        jButton4.setToolTipText("Permite renombrar la libreria");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarNombreLibActionPerformed(evt);
            }
        });

        Arbol_LibreriaAmodificar.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        Arbol_LibreriaAmodificar.setToolTipText("Arbol de precondiciones");
        Arbol_LibreriaAmodificar.setDragEnabled(true);
        VentanaArbol01.setViewportView(Arbol_LibreriaAmodificar);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NombreNodoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CrearNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(instanciaElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(VentanaArbol01, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(VentanaArbol01, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NombreNodoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instanciaElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CrearNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " Libreria Fuente ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        jPanel2.setToolTipText("Libreria fuente");

        CargarLibFuente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaceEditordePlanes/resources/Abrir.png"))); // NOI18N
        CargarLibFuente.setToolTipText("Cargar libreria fuente");
        CargarLibFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarLibFuenteActionPerformed(evt);
            }
        });

        Arbol_Librerias.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        Arbol_Librerias.setToolTipText("Arbol de postcondiciones");
        VentanaArbol02.setViewportView(Arbol_Librerias);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CargarLibFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VentanaArbol02, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(VentanaArbol02, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CargarLibFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " XML ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        jPanel3.setToolTipText("Formato XML");

        DetalleNodoElemento.setBackground(javax.swing.UIManager.getDefaults().getColor("MenuBar.background"));
        DetalleNodoElemento.setColumns(20);
        DetalleNodoElemento.setEditable(false);
        DetalleNodoElemento.setFont(new java.awt.Font("Verdana", 0, 9)); // NOI18N
        DetalleNodoElemento.setRows(5);
        DetalleNodoElemento.setToolTipText("Formato XML");
        jScrollPane1.setViewportView(DetalleNodoElemento);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
        );

        Archivo.setText("Menu");

        cargar_Libreria.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        cargar_Libreria.setFont(new java.awt.Font("Verdana", 0, 10));
        cargar_Libreria.setText("Abrir Libreria Actual");
        cargar_Libreria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargar_LibreriaActionPerformed(evt);
            }
        });
        Archivo.add(cargar_Libreria);

        guardarLib.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        guardarLib.setFont(new java.awt.Font("Verdana", 0, 10));
        guardarLib.setText("Guardar Libreria Actual");
        guardarLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarLibActionPerformed(evt);
            }
        });
        Archivo.add(guardarLib);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setFont(new java.awt.Font("Verdana", 0, 10));
        jMenuItem2.setText("Abrir Libreria Fuente");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarLibFuenteActionPerformed(evt);
            }
        });
        Archivo.add(jMenuItem2);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(interfaceEditordePlanes.IntefaceEditordePlanes.class).getContext().getActionMap(EdicionDeLibrerias.class, this);
        jMenuItem1.setAction(actionMap.get("Salir")); // NOI18N
        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setFont(new java.awt.Font("Verdana", 0, 10));
        jMenuItem1.setText("Salir");
        Archivo.add(jMenuItem1);

        jMenuBar1.add(Archivo);

        Edicion.setText("Edicion");

        borrarElementos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        borrarElementos.setFont(new java.awt.Font("Verdana", 0, 10));
        borrarElementos.setText("Borrar Elemento");
        borrarElementos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarElementosActionPerformed(evt);
            }
        });
        Edicion.add(borrarElementos);

        cambiarNombreLib.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        cambiarNombreLib.setFont(new java.awt.Font("Verdana", 0, 10));
        cambiarNombreLib.setText("Cambiar Nombre Libreria");
        cambiarNombreLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarNombreLibActionPerformed(evt);
            }
        });
        Edicion.add(cambiarNombreLib);

        jMenuBar1.add(Edicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(agregarNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agregarNodo, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    @Action
    public void Salir(){
        this.PantallaPadre.setLibreria(LibEnUso);
        PantallaPadre.getJTree1().setModel(Arbol_LibreriaAmodificar.getModel());
        IntefaceEditordePlanes.getApplication().getMainFrame().setEnabled(true);
        dispose();
    }
    private void instanciaElementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instanciaElementoActionPerformed
 //La idea de este metodo es instanciar elementos del lenguaje como el valor a una variable, agragar un predicado a otro predicado.
            TreeNode[] nodosx = null;
            TreePath rutax = null;
            TreeNode[] nodos = null;
            TreePath ruta = null;
            //Obtengo el argumento sin espacios finales e iniciales.
            String argumento = this.NombreNodoNuevo.getText().trim();
            
            //Obtengo en el Arbol cual es el nodo al cual se le va agregar o instanciar un elemento.
            DefaultMutableTreeNode nodoSeleccionado = null;
            nodoSeleccionado = (DefaultMutableTreeNode) Arbol_LibreriaAmodificar.getLastSelectedPathComponent();
            if (nodoSeleccionado == null) {
                return;
                }
            
            //Obtengo el nombre de la clase del objeto seleccionado
            Class aClass = nodoSeleccionado.getUserObject().getClass();
            if (aClass.getName().equalsIgnoreCase("java.lang.String")){return;}
            
            //La muestro para chequear...
            String nombreClase = nodoSeleccionado.getUserObject().getClass().getName();
            //Chequeo la seleccion, es para controlar cuando debageo
            System.out.println(nodoSeleccionado.getUserObject().getClass().getName());
            
            Predicado P=null;
            DefaultMutableTreeNode nodoNuevo = null; 
            //si es variable solo se le puede instanciar el valor...
            if (nombreClase.equalsIgnoreCase("EditorDePlanes.Variable")){
                                            //Obtengo la variable asociada al nodo del arbol    
                                            P = (Predicado)nodoSeleccionado.getUserObject();
                                            //Le agrego los argumentos, en este caso se instancia el valor de la variable con el argumento
                                            P.AgregarArgumentos(argumento);
                                 
                                            if (!nodoSeleccionado.isLeaf()){
                                                nodoSeleccionado.remove(0);
                                            }
                                            
                                            nodoSeleccionado.add(P.Obtener_Nodo().getFirstLeaf());
                                            
                                            modelo01.nodeStructureChanged(nodoSeleccionado);
                                         
                                            nodosx = modelo01.getPathToRoot(nodoSeleccionado);
                                            rutax = new TreePath(nodosx);
                                            Arbol_LibreriaAmodificar.collapsePath(rutax);
                                             
                                            nodos = modelo01.getPathToRoot(nodoSeleccionado.getFirstChild());
                                            ruta = new TreePath(nodos);
                                            Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
                                         
            }
            else{
                    //Como predicado compuesto sabe como instanciar sus elemento y en este caso cualquier tipo que lo compone 
                    //Creo uno y le pido sus elementos, de esta manera no tengo que andar preguntando por cada tipo de elemento del lenguaje.
                    P=new PredicadoCompuesto("aux");
                    P.AgregarArgumentos(argumento);
                    Vector PredicadoNuevo= P.Obtener_instancias();
             /*vv*/ //Aca luego voy hacer un for y voy agregar varios elemntos a la vez
                    Predicado NuevoPredicadoCreado= (Predicado)PredicadoNuevo.firstElement();
                    //Agrego la nueva instancia a elemento seleccionado
                    Predicado ElementoSeleccionado = (Predicado)nodoSeleccionado.getUserObject();
                    //ElementoSeleccionado.AgregarPredicado(PredicadoNuevo);
                    ElementoSeleccionado.agregarElemento(NuevoPredicadoCreado, null);
                    //Nodo del arbol en cual se va a ver reflejado el resultado
                    //Todo esto lo tendria que iterar en un for para cuando haga la version de a varios predicados
                    //nodoNuevo = NuevoPredicadoCreado.Obtener_Nodo();
                    //Lo agrego al nodo del cual cuelga
                    if (nodoSeleccionado.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Not")){
                        nodoSeleccionado.removeAllChildren();
                    }  
                    
                    nodoSeleccionado.add(NuevoPredicadoCreado.Obtener_Nodo());
                    //nodoSeleccionado.add(NuevoPredicadoCreado.Obtener_Nodo());
                    modelo01.nodeStructureChanged(nodoSeleccionado);
                    
                    //Colapso el arbol para que luego al expandir se reflejen los cambios en la etiqueta del nodo seleccionado
                    nodosx = modelo01.getPathToRoot(nodoSeleccionado);
                    rutax = new TreePath(nodosx);
                    Arbol_LibreriaAmodificar.collapsePath(rutax);
                    
                    //modelo01.nodeStructureChanged(nodoSeleccionado);
                    //modelo01.nodeChanged(nodoSeleccionado.getFirstChild());
                    // modelo01.reload();
                    
                    nodos = modelo01.getPathToRoot(nodoSeleccionado.getFirstChild());
                    ruta = new TreePath(nodos);
                    Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
                    
                   // Arbol_LibreriaAmodificar.updateUI();
  
            }

    }//GEN-LAST:event_instanciaElementoActionPerformed

    private void agregarNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarNodoActionPerformed

            //Nodo del Arbol Fuente que deseamos agregar en nuestra Libreria en Arbol Destino
            DefaultMutableTreeNode nodoFuente = (DefaultMutableTreeNode) this.Arbol_Librerias.getLastSelectedPathComponent();
            if (nodoFuente == null){return;}
            if (nodoFuente.getUserObject().getClass().getName().equalsIgnoreCase("java.lang.String")){
                return;
            }
            //Para esta implementacion voy a utilizar un peque?o truco  que consiste en combinar funcionalidad previamente realizada
            //O sea voy a pasar el nodo seleccionado a String con Obtener_Nombre(),
            //y despues hago como si estubiera agregando un elemento nuevo del campo 
            //de texto de la interface donde el usuario crea nuevos predicados
            /* Reemplaze a .Obtener_Nombre() por toString(). */
            String Fuente = ((NodoElemento) nodoFuente.getUserObject()).toString();//.Obtener_Nombre();
            this.NombreNodoNuevo.setText(Fuente);
            //nodoSeleccionado es en donde se va agregar el elemento nuevo
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) Arbol_LibreriaAmodificar.getLastSelectedPathComponent();
            if (nodoSeleccionado == null) {
                return;
            }
            NodoElemento destino = null;
            DefaultMutableTreeNode nodoDestino = null;
            DefaultMutableTreeNode nodoNuevo = null;
            boolean cambios = false;
            //Voy a tener que discriminar el tipo de objeto para el casting porque cuando se realizo esta parte del trabajo en el arbol 
            //se muestran instancias como pre y pos condiciones que no son objetos del modelo, si no instancias como por ejemplo un vector 
            //de pre y pos condiciones que se muestra en el arbol perteneciente alguna accion, lo cual no permitio hacerlos implementar la interface de nodo elemento 
            //la cual evitaria estar discriminando el tipo. Esto se tomo asi debido a que existia una implementacion previa y caso contrario se 
            //tendria que modificar como es la implementacion de todo el modelo y chequeo de amenazas, etc.
            if (nodoSeleccionado.getUserObject().toString().equalsIgnoreCase("Pos_Condiciones") || 
                nodoSeleccionado.getUserObject().toString().equalsIgnoreCase("Pre_Condiciones")){
                //Si es pre pos el nodo destino es el padre o sea una Accion
                //nodoDestino = (DefaultMutableTreeNode) nodoSeleccionado.getParent();
                //destino = (Accion)nodoDestino.getUserObject();
                
                if (nodoFuente.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Variable")||
                        nodoFuente.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.PredicadoCompuesto")||
                        nodoFuente.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Not")){
                 /*   
                    Predicado origen = (Predicado) nodoFuente.getUserObject();
                    nodoNuevo = origen.Obtener_Nodo();
/*vv*/                    //Si el origen es pre agrego en pre si no en pos
/*rr*/           /*   if (nodoSeleccionado.getUserObject().toString().equalsIgnoreCase("Pre_Condiciones")){
                        destino.agregarElemento(origen, "Pre_Condiciones");
                    }else{
                        destino.agregarElemento(origen, "Pos_Condiciones");
                    }
                    cambios = true;
                    //Esto es para luego actualizar el arbol
                    nodoDestino = nodoSeleccionado;
                   */ 
                    this.CrearNodoActionPerformed(evt);
                }   
            }else{
                    String nombreClase= nodoSeleccionado.getUserObject().getClass().getName();    
                    if (nombreClase.equalsIgnoreCase("EditorDePlanes.Libreria")){
                        
                        nodoDestino = nodoSeleccionado;
                        destino = (Libreria) nodoSeleccionado.getUserObject();
                        
                        if (nodoFuente.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Accion")){
                           /* nodoNuevo = ((Accion) nodoFuente.getUserObject()).Obtener_Nodo();
                            destino.agregarElemento((Accion) nodoFuente.getUserObject(),null);
                            cambios = true;
                            */
                            /*
                            Fuente = ((Accion)nodoFuente.getUserObject()).Obtener_Nombre().trim();
                            this.NombreNodoNuevo.setText(Fuente);
                            this.CrearNodoActionPerformed(evt);
                            */
                            
                            /*Obtengo pre y pos condiciones de la accion fuente seleccionada a ser insertada en destino*/
                            Vector pre = ((Accion)nodoFuente.getUserObject()).Obtener_Pre_Condiciones();
                            Vector pos = ((Accion)nodoFuente.getUserObject()).Obtener_Post_Condiciones();
                            
                            
                            PredicadoCompuesto pres = new PredicadoCompuesto("preCondiciones");
                            PredicadoCompuesto poss = new PredicadoCompuesto("posCondiciones");
                            
                            //String argPre = "(";
                            String arg1 = "";
                            
                            for(Iterator itpre = pre.iterator();itpre.hasNext();){
                               Predicado prediPre = (Predicado) itpre.next();
                               pres.AgregarArgumentos(prediPre.Obtener_Nombre_y_Argumentos());
                               
                               //arg1 = arg1 + prediPre.Obtener_Nombre_y_Argumentos();
                               //arg1 = arg1 + ",";
                            }
                            //argPre = argPre + arg1 + ")";
                            
                            
                            
                            //String argPos = "(";
                            String arg2 = "";
                            for (Iterator itpos = pos.iterator();itpos.hasNext();){
                                Predicado prediPos = (Predicado) itpos.next();
                                poss.AgregarArgumentos(prediPos.Obtener_Nombre_y_Argumentos());
                                
                                //arg2 = arg2 + prediPos.Obtener_Nombre_y_Argumentos();
                                //arg2 = arg2 + ",";                                
                            }
                            //argPos = argPos + arg2 + ")";
                            
                            //PredicadoCompuesto pres = new PredicadoCompuesto("preCondiciones");
                            //PredicadoCompuesto poss = new PredicadoCompuesto("posCondiciones");
                   
                            //pres.AgregarArgumentos(arg1/*argPre*/);
                            //poss.AgregarArgumentos(arg2/*argPos*/);
                            
                            Accion nuevaA = new Accion(((Accion)nodoFuente.getUserObject()).Obtener_Nombre(),-1,pres.Obtener_Predicados(),poss.Obtener_Predicados());
                            
                            destino.agregarElemento(nuevaA, null);
                            
                            nodoNuevo = nuevaA.Obtener_Nodo();
                            
                            cambios =true;
    
                        }
                    }else{
                            /*Agrego entre predicados*/
                            if (!(nombreClase.equalsIgnoreCase("EditorDePlanes.Accion"))){
                                //instancia con el texto seteado en NombreNodoNuevo 
                                this.instanciaElementoActionPerformed(evt);
                            }
                    }
                
                }
            /*Hay cambios actualizo el arbol*/
            if (cambios){
                nodoDestino.add(nodoNuevo);

                TreeNode[] nodosx = modelo01.getPathToRoot(nodoDestino);
                TreePath rutax = new TreePath(nodosx);
                Arbol_LibreriaAmodificar.collapsePath(rutax);

                modelo01.nodeStructureChanged(nodoDestino);

                TreeNode[] nodos = modelo01.getPathToRoot(nodoNuevo);
                TreePath ruta = new TreePath(nodos);
                Arbol_LibreriaAmodificar.scrollPathToVisible(ruta); 
            }

           
    }//GEN-LAST:event_agregarNodoActionPerformed

    private void CargarLibFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarLibFuenteActionPerformed
        //Instancio un Manager de Libreria
        MArchivos= new ManagerDeLibrerias();
        //Seteo su Directorio
        MArchivos.setearDirectorio(".\\librerias\\");
        //Obtengo la libreria elegida por el usuario
        Libreria Lib= MArchivos.abrirLibreria(this);
        //Lo ideal seria que muestre el nombre en el cuadro de imagen de la ventana de seleccion de archivo.
        String nombreLib= Lib.obtenerNombre();
        //Visualizo la Libreria en el Arbol de la Izquierda
        /*DefaultMutableTreeNode*/ Raiz02= Lib.Obtener_Nodo();
        //Creo su modelo
        this.modelo02.setRoot(Raiz02);
        //this.modelo02= new DefaultTreeModel(Raiz02);
        //Seteo el modelo
        this.Arbol_Librerias.setModel(modelo02);
        //Actualizo Cambios
        this.Arbol_Librerias.updateUI();
        
    }//GEN-LAST:event_CargarLibFuenteActionPerformed

    @SuppressWarnings("static-access")
    private void cargar_LibreriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargar_LibreriaActionPerformed
    /*Carga una libreria desde Archivo*/
        
        MArchivos= new ManagerDeLibrerias();
        
        MArchivos.setearDirectorio(".\\librerias\\");
        
        this.LibEnUso= MArchivos.abrirLibreria(this);
        if(this.LibEnUso!=null){
            //String nombreLib= Lib.obtenerNombre();
            this.Raiz= this.LibEnUso.Obtener_Nodo();
            this.modelo01.setRoot(this.Raiz);
            this.Arbol_LibreriaAmodificar.setModel(this.modelo01);
        }
        this.Arbol_LibreriaAmodificar.updateUI();

      
}//GEN-LAST:event_cargar_LibreriaActionPerformed


    private void CrearNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearNodoActionPerformed
    //Crear elementos del planning, sean acciones, o predicados en pre o pos condiciones      
         DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) Arbol_LibreriaAmodificar.getLastSelectedPathComponent();
            if (nodoSeleccionado == null) {
                return;
            }
            String argumento= NombreNodoNuevo.getText().trim();          
            DefaultMutableTreeNode predecesor = null;
            DefaultMutableTreeNode nodoNuevo = null;
            NodoElemento P = null;
            
            if (nodoSeleccionado.getUserObject().toString().equalsIgnoreCase("Pos_Condiciones") || 
                nodoSeleccionado.getUserObject().toString().equalsIgnoreCase("Pre_Condiciones")){
                
                    Predicado PrediNuevo = null;
                    predecesor = nodoSeleccionado;
                    //Creo un Predicado Compuesto Auxiliar y le paso el argumento
                    PrediNuevo = new PredicadoCompuesto("aux");
                    PrediNuevo.AgregarArgumentos(argumento);
                    Vector PredicadoNuevo= PrediNuevo.Obtener_instancias();
             /*vv*/ //Aca luego voy hacer un for y voy agregar varios elemntos a la vez
                    Predicado NuevoPredicadoCreado= (Predicado)PredicadoNuevo.firstElement();
                    //Agrego la nueva instancia a elemento seleccionado
                    DefaultMutableTreeNode nodoAccion = null;
                    nodoAccion = (DefaultMutableTreeNode) nodoSeleccionado.getParent();
                    Accion ElementoSeleccionado = (Accion) nodoAccion.getUserObject();
                    ElementoSeleccionado.agregarElemento(NuevoPredicadoCreado, nodoSeleccionado.getUserObject().toString());
                                    
                    //Colapso el arbol para que luego al expandir se reflejen los cambios en la etiqueta del nodo seleccionado
                    TreeNode[] nodosx = modelo01.getPathToRoot(nodoSeleccionado);
                    TreePath rutax = new TreePath(nodosx);
                    Arbol_LibreriaAmodificar.collapsePath(rutax);
                    
                    //Nodo del arbol en cual se va a ver reflejado el resultado
                    //Todo esto lo tendria que iterar en un for para cuando haga la version de a varios predicados
                    nodoNuevo= NuevoPredicadoCreado.Obtener_Nodo();
                    //Lo agrego al nodo del cual cuelga
                    nodoSeleccionado.add(nodoNuevo);
                    //Pido el numero de hijos
                    //int indiceSeleccionado = nodoSeleccionado.getChildCount();
           /*vv*/   //insertar en el modelo o hacerlo cuando haga guardar cambios
                    //modelo01.insertNodeInto(nodoNuevo, nodoSeleccionado, indiceSeleccionado -1);
                    //Otra forma distinta a la comentada en la linea de arriba
                    modelo01.nodeStructureChanged(nodoSeleccionado);
                    TreeNode[] nodos = modelo01.getPathToRoot(nodoNuevo);
                    TreePath ruta = new TreePath(nodos);
                    Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
                
            }else{ 
                     
                String nombreClase= nodoSeleccionado.getUserObject().getClass().getName();    
                if (nombreClase.equalsIgnoreCase("EditorDePlanes.Libreria")){
                    
                    Accion nuevaAccion = new Accion(argumento);
                    DefaultMutableTreeNode nodoAccion = nuevaAccion.Obtener_Nodo();
                    nodoSeleccionado.add(nodoAccion);
                    
                    Libreria Lib = (Libreria) nodoSeleccionado.getUserObject();
                    Lib.AgregarAccion(nuevaAccion);
                    
                    TreeNode[] nodosx = modelo01.getPathToRoot(nodoSeleccionado);
                    TreePath rutax = new TreePath(nodosx);
                    Arbol_LibreriaAmodificar.collapsePath(rutax);
                    
                    modelo01.nodeStructureChanged(nodoSeleccionado);
                    TreeNode[] nodos = modelo01.getPathToRoot(nodoAccion);
                    TreePath ruta = new TreePath(nodos);
                    Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
                    }
                 }
            if (predecesor == null) {
                return;
            }
          
    }//GEN-LAST:event_CrearNodoActionPerformed

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

  //cuando cierra la ventana por ahora me retorna la libreria modificada, en realidad hacerlo cuando hace guardar cambios
   
}//GEN-LAST:event_formWindowClosed
/* Cuando este cerrando la pantalla edicion de ibreria, pasa la liberria modificada como parametro*/
private void borrarElementosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarElementosActionPerformed

    TreePath rutaSeleccionada = Arbol_LibreriaAmodificar.getSelectionPath();
    if (rutaSeleccionada == null) return;
    
    DefaultMutableTreeNode NodoAborrar = (DefaultMutableTreeNode) rutaSeleccionada.getLastPathComponent();
    if (NodoAborrar == null) return;
    
    DefaultMutableTreeNode NodoContenedor = null;
    NodoElemento elementoContenedor = null;
   
    /*vv*/ // Preguntar si el nodo a borrar no es el root si no es hacer esto si no terminar de implementar o sea borrar una libreria
    
    if (NodoAborrar.getUserObject().toString().equalsIgnoreCase("Pos_Condiciones")){
        
        elementoContenedor = (Accion)((DefaultMutableTreeNode)NodoAborrar.getParent()).getUserObject();
        elementoContenedor.borrarElemento(null, "posAll");
 
        NodoContenedor = NodoAborrar;
        NodoContenedor.removeAllChildren();

        TreeNode[] nodosx = modelo01.getPathToRoot(NodoContenedor);
        TreePath rutax = new TreePath(nodosx);
        Arbol_LibreriaAmodificar.collapsePath(rutax);

        modelo01.nodeStructureChanged(NodoContenedor);
        TreeNode[] nodos = modelo01.getPathToRoot(NodoContenedor);
        TreePath ruta = new TreePath(nodos);
        Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
    }else if (NodoAborrar.getUserObject().toString().equalsIgnoreCase("Pre_Condiciones")){
               elementoContenedor = (Accion)((DefaultMutableTreeNode)NodoAborrar.getParent()).getUserObject();
               elementoContenedor.borrarElemento(null, "preAll");
               
               NodoContenedor = NodoAborrar;
               NodoContenedor.removeAllChildren();

               TreeNode[] nodosx = modelo01.getPathToRoot(NodoContenedor);
               TreePath rutax = new TreePath(nodosx);
               Arbol_LibreriaAmodificar.collapsePath(rutax);

               modelo01.nodeStructureChanged(NodoContenedor);
               TreeNode[] nodos = modelo01.getPathToRoot(NodoContenedor);
               TreePath ruta = new TreePath(nodos);
               Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);           
               }
                else if ((!(NodoAborrar.isRoot())) && (!(NodoAborrar.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Libreria")))){
                          NodoContenedor = (DefaultMutableTreeNode) NodoAborrar.getParent();
                          if (NodoContenedor.getUserObject().toString().equalsIgnoreCase("Pre_Condiciones")){

                              elementoContenedor = (NodoElemento)((DefaultMutableTreeNode)NodoContenedor.getParent()).getUserObject();
                              elementoContenedor.borrarElemento(NodoAborrar.getUserObject(), "Pre");
                          }else if (NodoContenedor.getUserObject().toString().equalsIgnoreCase("Pos_Condiciones")){

                                    elementoContenedor = (NodoElemento)((DefaultMutableTreeNode)NodoContenedor.getParent()).getUserObject();
                                    elementoContenedor.borrarElemento(NodoAborrar.getUserObject(), "Pos");
                                                //preguntar si es raiz porque en ese caso quiere borrar la libreria
                              /*vv*/}else{
                                                        elementoContenedor = (NodoElemento)((DefaultMutableTreeNode)NodoAborrar.getParent()).getUserObject();
                                                        elementoContenedor.borrarElemento(NodoAborrar.getUserObject(), evt);
                                         }

                           if(!(((DefaultMutableTreeNode)NodoAborrar.getParent()).getUserObject().getClass().getName().equalsIgnoreCase("editorDePlanes.Variable")&& NodoAborrar.getUserObject().getClass().getName().equalsIgnoreCase("java.lang.String")) ){
                               NodoContenedor.remove(NodoAborrar);
                              }else{
                                    Variable aux = (Variable) NodoContenedor.getUserObject();
                                    aux.cambiarValor(aux.Obtener_Nombre());
                                    NodoContenedor.getFirstLeaf().setUserObject(aux.obtenerValor());
                                    modelo01.nodeStructureChanged(NodoContenedor.getFirstChild());
                                   }
                           TreeNode[] nodosx = modelo01.getPathToRoot(NodoContenedor);
                           TreePath rutax = new TreePath(nodosx);
                           Arbol_LibreriaAmodificar.collapsePath(rutax);
                           /*vv*///hacer visible todos los hijos
                           modelo01.nodeStructureChanged(NodoContenedor);
                           TreeNode[] nodos = modelo01.getPathToRoot(NodoContenedor);
                           TreePath ruta = new TreePath(nodos);
                           Arbol_LibreriaAmodificar.scrollPathToVisible(ruta);
  
                    }else{/*si es Root*/
                            LibEnUso = new Libreria("NuevaLibreria");
                            Raiz.removeAllChildren();
                            Raiz.add(LibEnUso.Obtener_Nodo());
                            Arbol_LibreriaAmodificar.collapseRow(0);
                            
                            modelo01.nodeStructureChanged(Raiz);
                            Arbol_LibreriaAmodificar.scrollRowToVisible(0);
                    }
}//GEN-LAST:event_borrarElementosActionPerformed

private void guardarLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarLibActionPerformed
    MArchivos= new ManagerDeLibrerias(); 
    MArchivos.setearDirectorio(".\\librerias\\");
    MArchivos.guardar(this, LibEnUso);
}//GEN-LAST:event_guardarLibActionPerformed

private void cambiarNombreLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarNombreLibActionPerformed

    TreePath rutaSeleccionada = Arbol_LibreriaAmodificar.getSelectionPath();
    if (rutaSeleccionada == null) return;
            
    DefaultMutableTreeNode Nodo= (DefaultMutableTreeNode)rutaSeleccionada.getLastPathComponent();
    if (Nodo == null) return;
    this.cambioNombreLib.setVisible(true);
    this.cambioNombreLib.setBounds(250, 150, 250, 150);
              
}//GEN-LAST:event_cambiarNombreLibActionPerformed

private void okNombreLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okNombreLibActionPerformed

    TreePath rutaSeleccionada = Arbol_LibreriaAmodificar.getSelectionPath();//GEN-LAST:event_okNombreLibActionPerformed
    if (rutaSeleccionada == null) return;
            
    DefaultMutableTreeNode Nodo= (DefaultMutableTreeNode)rutaSeleccionada.getLastPathComponent();
    if (Nodo == null) return;

    if (Nodo.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Libreria")){
        Libreria A = (Libreria)Nodo.getUserObject();
        String nombre = this.nombreDeLib.getText();    
        A.cambiarNombre(nombre.trim());       
        }
    Arbol_LibreriaAmodificar.updateUI();
    this.cambioNombreLib.setVisible(false);
    this.cambioNombreLib.dispose();

}

private void cancelarNombreLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarNombreLibActionPerformed
    this.cambioNombreLib.dispose();
}//GEN-LAST:event_cancelarNombreLibActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
    Salir();
}//GEN-LAST:event_formWindowClosing

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
    borrarElementosActionPerformed(evt);
}//GEN-LAST:event_jButton1ActionPerformed

private void nombreDeLibKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreDeLibKeyPressed
    // TODO add your handling code here:
     if (evt.getKeyCode()==KeyEvent.VK_ENTER){
        TreePath rutaSeleccionada = Arbol_LibreriaAmodificar.getSelectionPath();
        if (rutaSeleccionada == null) return;

        DefaultMutableTreeNode Nodo= (DefaultMutableTreeNode)rutaSeleccionada.getLastPathComponent();
        if (Nodo == null) return;

        if (Nodo.getUserObject().getClass().getName().equalsIgnoreCase("EditorDePlanes.Libreria")){
            Libreria A = (Libreria)Nodo.getUserObject();
            String nombre = this.nombreDeLib.getText();
            A.cambiarNombre(nombre.trim());
            }
        Arbol_LibreriaAmodificar.updateUI();
        this.cambioNombreLib.setVisible(false);
        this.cambioNombreLib.dispose();
     }
}//GEN-LAST:event_nombreDeLibKeyPressed

    /**
     * @param args the command line arguments
     */
    private class PanelDeDetalleNodo implements TreeSelectionListener{
     
        public void valueChanged(TreeSelectionEvent e) {
        //hacer algo con DetalleNodoElemento
            DetalleNodoElemento.setText("");
            
            TreePath rutaSeleccionada = Arbol_LibreriaAmodificar.getSelectionPath();
            if (rutaSeleccionada == null) return;
            
            DefaultMutableTreeNode Nodo= (DefaultMutableTreeNode)rutaSeleccionada.getLastPathComponent();
            if (Nodo == null) return;
            
            if (Nodo.getUserObject() == null) return;
            Class aClass = Nodo.getUserObject().getClass();
            
            if (aClass.getName().equalsIgnoreCase("java.lang.String")){return;}
            
            NodoElemento elementoSeleccionado= (NodoElemento)Nodo.getUserObject();
            
            XStream traductor= new XStream();
            //traductor.alias("Lib1_PRUEBA_UNO",Libreria.class);
            traductor.setMode(XStream.ID_REFERENCES);
            String XML= traductor.toXML(elementoSeleccionado);
            
            DetalleNodoElemento.setText(XML);         
        }
    }
    
    private Libreria getLibreria(){
        return this.LibEnUso;
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Arbol_LibreriaAmodificar;
    private javax.swing.JTree Arbol_Librerias;
    private javax.swing.JMenu Archivo;
    private javax.swing.JButton CargarLibFuente;
    private javax.swing.JButton CrearNodo;
    private javax.swing.JTextArea DetalleNodoElemento;
    private javax.swing.JMenu Edicion;
    private javax.swing.JTextField NombreNodoNuevo;
    private javax.swing.JScrollPane VentanaArbol01;
    private javax.swing.JScrollPane VentanaArbol02;
    private javax.swing.JButton agregarNodo;
    private javax.swing.JMenuItem borrarElementos;
    private javax.swing.JMenuItem cambiarNombreLib;
    private javax.swing.JFrame cambioNombreLib;
    private javax.swing.JButton cancelarNombreLib;
    private javax.swing.JMenuItem cargar_Libreria;
    private javax.swing.JMenuItem guardarLib;
    private javax.swing.JButton instanciaElemento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreDeLib;
    private javax.swing.JButton okNombreLib;
    // End of variables declaration//GEN-END:variables
    private DefaultTreeModel modelo01;
    private DefaultTreeModel modelo02;
    private ManagerDeLibrerias MArchivos;
    //Esta Libreria se instancia con la que se desea modificar
    private static Libreria LibEnUso;
    private DefaultMutableTreeNode Raiz;
    private DefaultMutableTreeNode Raiz02;
    private InterfaceEditordePlanesView PantallaPadre;

    
}

